// Code generated by mockery v2.46.0. DO NOT EDIT.

package perms

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockStorage is an autogenerated mock type for the storage type
type mockStorage struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: ctx
func (_m *mockStorage) GetAll(ctx context.Context) (map[Role][]Permission, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 map[Role][]Permission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[Role][]Permission, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[Role][]Permission); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[Role][]Permission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPermissions provides a mock function with given fields: ctx, roles
func (_m *mockStorage) GetPermissions(ctx context.Context, roles *Role) ([]Permission, error) {
	ret := _m.Called(ctx, roles)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissions")
	}

	var r0 []Permission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *Role) ([]Permission, error)); ok {
		return rf(ctx, roles)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *Role) []Permission); ok {
		r0 = rf(ctx, roles)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Permission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *Role) error); ok {
		r1 = rf(ctx, roles)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, roles, perms
func (_m *mockStorage) Save(ctx context.Context, roles *Role, perms []Permission) error {
	ret := _m.Called(ctx, roles, perms)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Role, []Permission) error); ok {
		r0 = rf(ctx, roles, perms)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newMockStorage creates a new instance of mockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockStorage {
	mock := &mockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
