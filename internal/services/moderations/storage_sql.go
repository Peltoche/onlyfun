package moderations

import (
	"context"
	"database/sql"
	"fmt"

	sq "github.com/Masterminds/squirrel"
	"github.com/Peltoche/onlyfun/internal/tools/ptr"
	"github.com/Peltoche/onlyfun/internal/tools/sqlstorage"
)

const tableName = "moderations"

var allFields = []string{"id", "post_id", "reason", "created_at", "created_by"}

type sqlStorage struct {
	db sqlstorage.Querier
}

func newSqlStorage(db sqlstorage.Querier) *sqlStorage {
	return &sqlStorage{db}
}

func (s *sqlStorage) Save(ctx context.Context, m *Moderation) error {
	var id uint

	err := sq.
		Insert(tableName).
		Columns(allFields[1:]...). // Remove the id, it will be autogenerated
		Values(
			m.postID,
			m.reason,
			ptr.To(sqlstorage.SQLTime(m.createdAt)),
			m.createdBy).
		Suffix("RETURNING \"id\"").
		RunWith(s.db).
		ScanContext(ctx, &id)
	if err != nil {
		return fmt.Errorf("sql error: %w", err)
	}

	m.id = id

	return nil
}

func (s *sqlStorage) GetAll(ctx context.Context, cmd *sqlstorage.PaginateCmd) ([]Moderation, error) {
	rows, err := sqlstorage.PaginateSelection(sq.
		Select(allFields...).
		From(tableName), cmd).
		RunWith(s.db).
		QueryContext(ctx)
	if err != nil {
		return nil, fmt.Errorf("sql error: %w", err)
	}

	return s.scanRows(rows)
}

// func (s *sqlStorage) getByKeys(ctx context.Context, wheres ...any) (*Moderation, error) {
// 	res := Moderation{}
//
// 	query := sq.
// 		Select(allFields...).
// 		From(tableName)
//
// 	for _, where := range wheres {
// 		query = query.Where(where)
// 	}
//
// 	var sqlCreatedAt sqlstorage.SQLTime
// 	err := query.
// 		RunWith(s.db).
// 		ScanContext(ctx,
// 			&res.id,
// 			&res.postID,
// 			&res.reason,
// 			&sqlCreatedAt,
// 			&res.createdBy)
// 	if errors.Is(err, sql.ErrNoRows) {
// 		return nil, errNotFound
// 	}
//
// 	res.createdAt = sqlCreatedAt.Time()
//
// 	if err != nil {
// 		return nil, fmt.Errorf("sql error: %w", err)
// 	}
//
// 	return &res, nil
// }

func (s *sqlStorage) scanRows(rows *sql.Rows) ([]Moderation, error) {
	moderations := []Moderation{}

	for rows.Next() {
		var res Moderation
		var sqlCreatedAt sqlstorage.SQLTime

		err := rows.Scan(&res.id,
			&res.postID,
			&res.reason,
			&sqlCreatedAt,
			&res.createdBy)
		if err != nil {
			return nil, fmt.Errorf("failed to scan a row: %w", err)
		}

		res.createdAt = sqlCreatedAt.Time()

		moderations = append(moderations, res)
	}

	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("scan error: %w", err)
	}

	return moderations, nil
}
