// Code generated by mockery v2.46.0. DO NOT EDIT.

package medias

import (
	io "io"

	uuid "github.com/Peltoche/onlyfun/internal/tools/uuid"
	mock "github.com/stretchr/testify/mock"
)

// mockFileStorage is an autogenerated mock type for the fileStorage type
type mockFileStorage struct {
	mock.Mock
}

// DeleteFile provides a mock function with given fields: fileID
func (_m *mockFileStorage) DeleteFile(fileID uuid.UUID) error {
	ret := _m.Called(fileID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(fileID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFileDownloader provides a mock function with given fields: fileID
func (_m *mockFileStorage) NewFileDownloader(fileID uuid.UUID) (io.ReadSeekCloser, error) {
	ret := _m.Called(fileID)

	if len(ret) == 0 {
		panic("no return value specified for NewFileDownloader")
	}

	var r0 io.ReadSeekCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (io.ReadSeekCloser, error)); ok {
		return rf(fileID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) io.ReadSeekCloser); ok {
		r0 = rf(fileID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadSeekCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(fileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFileUploader provides a mock function with given fields:
func (_m *mockFileStorage) NewFileUploader() (uuid.UUID, io.WriteCloser, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewFileUploader")
	}

	var r0 uuid.UUID
	var r1 io.WriteCloser
	var r2 error
	if rf, ok := ret.Get(0).(func() (uuid.UUID, io.WriteCloser, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uuid.UUID)
	}

	if rf, ok := ret.Get(1).(func() io.WriteCloser); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(io.WriteCloser)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// newMockFileStorage creates a new instance of mockFileStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockFileStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockFileStorage {
	mock := &mockFileStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
