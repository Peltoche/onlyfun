// Code generated by mockery v2.46.0. DO NOT EDIT.

package posts

import (
	context "context"

	uuid "github.com/Peltoche/onlyfun/internal/tools/uuid"
	mock "github.com/stretchr/testify/mock"
)

// mockStorage is an autogenerated mock type for the storage type
type mockStorage struct {
	mock.Mock
}

// CountPostsWithStatus provides a mock function with given fields: ctx, status
func (_m *mockStorage) CountPostsWithStatus(ctx context.Context, status Status) (int, error) {
	ret := _m.Called(ctx, status)

	if len(ret) == 0 {
		panic("no return value specified for CountPostsWithStatus")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, Status) (int, error)); ok {
		return rf(ctx, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, Status) int); ok {
		r0 = rf(ctx, status)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, Status) error); ok {
		r1 = rf(ctx, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountUserPostsByStatus provides a mock function with given fields: ctx, userID, status
func (_m *mockStorage) CountUserPostsByStatus(ctx context.Context, userID uuid.UUID, status Status) (int, error) {
	ret := _m.Called(ctx, userID, status)

	if len(ret) == 0 {
		panic("no return value specified for CountUserPostsByStatus")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, Status) (int, error)); ok {
		return rf(ctx, userID, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, Status) int); ok {
		r0 = rf(ctx, userID, status)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, Status) error); ok {
		r1 = rf(ctx, userID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestPostWithStatus provides a mock function with given fields: ctx, status
func (_m *mockStorage) GetLatestPostWithStatus(ctx context.Context, status Status) (*Post, error) {
	ret := _m.Called(ctx, status)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestPostWithStatus")
	}

	var r0 *Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, Status) (*Post, error)); ok {
		return rf(ctx, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, Status) *Post); ok {
		r0 = rf(ctx, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, Status) error); ok {
		r1 = rf(ctx, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListedPosts provides a mock function with given fields: ctx, start, limit
func (_m *mockStorage) GetListedPosts(ctx context.Context, start uint64, limit uint64) ([]Post, error) {
	ret := _m.Called(ctx, start, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetListedPosts")
	}

	var r0 []Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) ([]Post, error)); ok {
		return rf(ctx, start, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) []Post); ok {
		r0 = rf(ctx, start, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, uint64) error); ok {
		r1 = rf(ctx, start, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, post
func (_m *mockStorage) Save(ctx context.Context, post *Post) (uint64, error) {
	ret := _m.Called(ctx, post)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *Post) (uint64, error)); ok {
		return rf(ctx, post)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *Post) uint64); ok {
		r0 = rf(ctx, post)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *Post) error); ok {
		r1 = rf(ctx, post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMockStorage creates a new instance of mockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockStorage {
	mock := &mockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
