package posts

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	sq "github.com/Masterminds/squirrel"
	"github.com/Peltoche/onlyfun/internal/tools/ptr"
	"github.com/Peltoche/onlyfun/internal/tools/sqlstorage"
	"github.com/Peltoche/onlyfun/internal/tools/uuid"
)

const tableName = "posts"

var errNotFound = errors.New("not found")

var allFields = []string{"id", "status", "title", "file_id", "created_at", "created_by"}

type sqlStorage struct {
	db sqlstorage.Querier
}

func newSqlStorage(db sqlstorage.Querier) *sqlStorage {
	return &sqlStorage{db}
}

func (s *sqlStorage) Save(ctx context.Context, p *Post) error {
	var id uint

	err := sq.
		Insert(tableName).
		Columns(allFields[1:]...). // Remove the id, it will be autogenerated
		Values(
			p.status,
			p.title,
			p.fileID,
			ptr.To(sqlstorage.SQLTime(p.createdAt)),
			p.createdBy).
		Suffix("RETURNING \"id\"").
		RunWith(s.db).
		ScanContext(ctx, &id)
	if err != nil {
		return fmt.Errorf("sql error: %w", err)
	}

	p.id = id

	return nil
}

func (s *sqlStorage) GetByID(ctx context.Context, postID uint) (*Post, error) {
	var res Post
	var sqlCreatedAt sqlstorage.SQLTime

	err := sq.Select(allFields...).
		From(tableName).
		Where(sq.Eq{"id": postID}).
		RunWith(s.db).
		ScanContext(ctx,
			&res.id,
			&res.status,
			&res.title,
			&res.fileID,
			&sqlCreatedAt,
			&res.createdBy)
	if errors.Is(err, sql.ErrNoRows) {
		return nil, errNotFound
	}

	if err != nil {
		return nil, fmt.Errorf("sql error: %w", err)
	}

	res.createdAt = sqlCreatedAt.Time()

	return &res, nil
}

func (s *sqlStorage) GetListedPosts(ctx context.Context, start uint, limit uint) ([]Post, error) {
	rows, err := sq.
		Select(allFields...).
		From(tableName).
		Where(
			sq.And{
				sq.LtOrEq{"id": start},
				sq.Eq{"status": Listed},
			},
		).
		OrderBy("id DESC").
		Limit(uint64(limit)).
		RunWith(s.db).
		QueryContext(ctx)
	if err != nil {
		return nil, fmt.Errorf("sql error: %w", err)
	}

	return s.scanRows(rows)
}

func (s *sqlStorage) CountPostsWithStatus(ctx context.Context, status Status) (int, error) {
	return s.countByKeys(ctx, sq.Eq{"status": status})
}

func (s *sqlStorage) CountUserPostsByStatus(ctx context.Context, userID uuid.UUID, status Status) (int, error) {
	return s.countByKeys(ctx, sq.Eq{"created_by": userID, "status": status})
}

func (s *sqlStorage) GetOldestPostWithStatus(ctx context.Context, status Status) (*Post, error) {
	row := sq.Select(allFields...).
		From(tableName).
		Where(sq.Eq{"status": status}).
		OrderBy("id").
		Limit(1).
		RunWith(s.db).
		QueryRowContext(ctx)

	return s.scanRow(row)
}

func (s *sqlStorage) GetLatestPostWithStatus(ctx context.Context, status Status) (*Post, error) {
	row := sq.Select(allFields...).
		From(tableName).
		Where(sq.Eq{"status": status}).
		OrderBy("id DESC").
		Limit(1).
		RunWith(s.db).
		QueryRowContext(ctx)

	return s.scanRow(row)
}

func (s *sqlStorage) scanRow(row sq.RowScanner) (*Post, error) {
	var res Post
	var sqlCreatedAt sqlstorage.SQLTime

	err := row.Scan(
		&res.id,
		&res.status,
		&res.title,
		&res.fileID,
		&sqlCreatedAt,
		&res.createdBy,
	)
	if errors.Is(err, sql.ErrNoRows) {
		return nil, errNotFound
	}

	if err != nil {
		return nil, fmt.Errorf("failed to scan row: %w", err)
	}

	res.createdAt = sqlCreatedAt.Time()

	return &res, nil
}

func (s *sqlStorage) Update(ctx context.Context, post *Post) error {
	_, err := sq.Update(tableName).
		SetMap(map[string]any{
			"status":  post.status,
			"file_id": post.fileID,
		}).
		Where(sq.Eq{"id": post.id}).
		RunWith(s.db).
		ExecContext(ctx)
	if err != nil {
		return fmt.Errorf("sql error: %w", err)
	}

	return nil
}

func (s *sqlStorage) countByKeys(ctx context.Context, wheres ...any) (int, error) {
	var count int

	query := sq.Select("COUNT(*)").
		From(tableName)

	for _, where := range wheres {
		query = query.Where(where)
	}

	err := query.
		RunWith(s.db).
		ScanContext(ctx, &count)
	if err != nil {
		return -1, fmt.Errorf("sql error: %w", err)
	}

	return count, nil
}

func (s *sqlStorage) scanRows(rows *sql.Rows) ([]Post, error) {
	posts := []Post{}

	for rows.Next() {
		var res Post
		var sqlCreatedAt sqlstorage.SQLTime

		err := rows.Scan(&res.id,
			&res.status,
			&res.title,
			&res.fileID,
			&sqlCreatedAt,
			&res.createdBy)
		if err != nil {
			return nil, fmt.Errorf("failed to scan a row: %w", err)
		}

		res.createdAt = sqlCreatedAt.Time()

		posts = append(posts, res)
	}

	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("scan error: %w", err)
	}

	return posts, nil
}
