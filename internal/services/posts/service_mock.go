// Code generated by mockery v2.46.0. DO NOT EDIT.

package posts

import (
	context "context"

	users "github.com/Peltoche/onlyfun/internal/services/users"
	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// CountPostsWaitingModeration provides a mock function with given fields: ctx
func (_m *MockService) CountPostsWaitingModeration(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CountPostsWaitingModeration")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, cmd
func (_m *MockService) Create(ctx context.Context, cmd *CreateCmd) (*Post, error) {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CreateCmd) (*Post, error)); ok {
		return rf(ctx, cmd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CreateCmd) *Post); ok {
		r0 = rf(ctx, cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CreateCmd) error); ok {
		r1 = rf(ctx, cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestPost provides a mock function with given fields: ctx
func (_m *MockService) GetLatestPost(ctx context.Context) (*Post, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestPost")
	}

	var r0 *Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*Post, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *Post); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNextPostToModerate provides a mock function with given fields: ctx
func (_m *MockService) GetNextPostToModerate(ctx context.Context) (*Post, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetNextPostToModerate")
	}

	var r0 *Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*Post, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *Post); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPosts provides a mock function with given fields: ctx, start, nbPosts
func (_m *MockService) GetPosts(ctx context.Context, start uint64, nbPosts uint64) ([]Post, error) {
	ret := _m.Called(ctx, start, nbPosts)

	if len(ret) == 0 {
		panic("no return value specified for GetPosts")
	}

	var r0 []Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) ([]Post, error)); ok {
		return rf(ctx, start, nbPosts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) []Post); ok {
		r0 = rf(ctx, start, nbPosts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, uint64) error); ok {
		r1 = rf(ctx, start, nbPosts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserStats provides a mock function with given fields: ctx, user
func (_m *MockService) GetUserStats(ctx context.Context, user *users.User) (map[Status]int, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for GetUserStats")
	}

	var r0 map[Status]int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *users.User) (map[Status]int, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *users.User) map[Status]int); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[Status]int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *users.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuscribeToNewPost provides a mock function with given fields:
func (_m *MockService) SuscribeToNewPost() <-chan Post {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SuscribeToNewPost")
	}

	var r0 <-chan Post
	if rf, ok := ret.Get(0).(func() <-chan Post); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan Post)
		}
	}

	return r0
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
